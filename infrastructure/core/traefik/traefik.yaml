# ==================== ServiceAccount ====================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik
  namespace: default

---

# ==================== ClusterRole ====================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: traefik-role
rules:
  - apiGroups: [""]
    resources:
      - services
      - endpoints
      - secrets
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.io
    resources:
      - middlewares
      - middlewaretcps
      - ingressroutes
      - traefikservices
      - ingressroutetcps
      - ingressrouteudps
      - tlsoptions
      - tlsstores
      - serverstransports
      - serverstransporttcps
    verbs:
      - get
      - list
      - watch

---

# ==================== ClusterRoleBinding ====================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: traefik-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-role
subjects:
  - kind: ServiceAccount
    name: traefik
    namespace: default

---

# ==================== Deployment ====================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  namespace: default
  labels:
    app: traefik
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik
      containers:
        - name: traefik
          image: traefik:v3.3
          args:
            - --api.dashboard=true
            - --api.insecure=true
            - --providers.kubernetescrd
            - --entrypoints.web.address=:80
            - --entrypoints.websecure.address=:443
          ports:
            - name: web
              containerPort: 80
            - name: websecure
              containerPort: 443
            - name: dashboard
              containerPort: 8080

---

# ==================== Service ====================
apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace: default
spec:
  type: LoadBalancer
  selector:
    app: traefik
  ports:
    - name: web
      port: 80
      targetPort: 80
    - name: websecure
      port: 443
      targetPort: 443
    - name: dashboard
      port: 8080
      targetPort: 8080

---

# ==================== Middleware (Basic Auth) ====================
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: dashboard-auth
  namespace: default
spec:
  basicAuth:
    secret: traefik-dashboard-auth

---

# ==================== Secret (Basic Auth Credentials) ====================
apiVersion: v1
kind: Secret
metadata:
  name: traefik-dashboard-auth
  namespace: default
type: Opaque
data:
  # admin:$apr1$randomsalt$hash şeklinde htpasswd ile oluşturulmalı.
  users: YWRtaW46JGFwcjEkdmVIU1YwTlYkZ3FFSC5JbGhjZFlNc0hMNUdCSzNKLw==

---

# ==================== IngressRoute for Dashboard ====================
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`labtraefik.mydomain.com`)
      kind: Rule
      middlewares:
        - name: dashboard-auth
      services:
        - name: api@internal
          kind: TraefikService
  tls:
    # TLS secret'iniz var ise buraya ismini yazın, yoksa TLS olmadan test edin.
    secretName: mydomain-tls
